#- name: Wait for HTTP 200
#  uri:
#    url: "http://{{girder_host}}:{{girder_port}}/api/v1/molecules"
#    status_code: 200
#  retries: 30
#  delay: 5
#  register: result
#  until: result.failed is not defined
#  changed_when: false


- name: Create Girder monogchemdev user
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    user:
      firstName: "mongochemdev"
      lastName: "mongochemdev"
      login: "mongochemdev"
      password: "{{ mongochemdev_password }}"
      email: "mongochemdev@kitware.com"
    state: present

- name: Authenticate with Girder
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    username: "mongochemdev"
    password: "{{mongochemdev_password}}"
    get:
      path: "user/me"
  register: me

- name: Get list of current clusters
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    username: "mongochemdev"
    password: "{{mongochemdev_password}}"
    get:
      path: "clusters"
      json: {
        "type": "trad"
      }
  register: clusters

- name: Create cluster
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    username: "mongochemdev"
    password: "{{mongochemdev_password}}"
    post:
      path: "clusters"
      json: {
        "name": "demo_cluster",
        "type": "trad",
        "config": {
          "host": gridengine,
          "ssh": {
            "user": "testuser"
          },
          "jobOutputDir": "/data"
        }
      }
  register: cluster
  when: clusters.gc_return|length == 0

- name: Set cluster from output
  set_fact:
    cluster: "{{ clusters.gc_return[0] }}"
  when: clusters.gc_return|length == 1

- name: Set cluster from output
  set_fact:
    cluster: "{{ cluster.gc_return }}"
  when: clusters.gc_return|length == 0

- name: Wait for cluster to move into the created state
  uri:
    headers:
      Girder-Token: "{{ me.token }}"
    body_format: json
    url: "{{ansible_girder_api_url}}/clusters/{{cluster._id}}/status"
    status_code: 200
  register: result
  until: result.json.status == 'created' or result.json.status == 'running'
  retries: 15
  delay: 1

- name: Refresh cluster so we have the public key
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    token: "{{ me.token }}"
    get:
      path: "clusters/{{cluster._id}}"
      json: {
        "type": "trad"
      }
  register: cluster

- name: Set cluster from output
  set_fact:
    cluster: "{{ cluster.gc_return }}"

- name: Add public key to authorize_keys
  authorized_key:
    user: testuser
    key: "{{ cluster.config.ssh.publicKey }}"
  delegate_to: gridengine

- name: Start cluster
  girder:
    apiUrl: "{{ansible_girder_api_url}}"
    token: "{{ me.token }}"
    put:
      path: "clusters/{{cluster['_id']}}/start"

- name: Wait for cluster to move into the running state
  uri:
    headers:
      Girder-Token: "{{ me.token }}"
    body_format: json
    url: "{{ansible_girder_api_url}}/clusters/{{cluster._id}}/status"
    status_code: 200
  register: result
  until: result.json.status == 'running'
  retries: 10
  delay: 1
